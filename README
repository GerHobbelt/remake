$Id: README,v 1.2 2005/12/20 01:41:34 rockyb Exp $

This directory contains the 3.80+debugger release of GNU Make.

See the file NEWS for the user-visible changes from previous releases.
In addition, there have been bugs fixed.

Please check the system-specific notes below for any caveats related to
your operating system.

For general building and installation instructions, see the file INSTALL.

If you need to build GNU Make and have no other `make' program to use,
you can use the shell script `build.sh' instead.  To do this, first run
`configure' as described in INSTALL.  Then, instead of typing `make' to
build the program, type `sh build.sh'.  This should compile the program
in the current directory.  Then you will have a Make program that you can
use for `./make install', or whatever else.

GNU Make is free software.  See the file COPYING for copying conditions.


Downloading
-----------

GNU Make can be obtained in many different ways.  See a description here:

  http://bashdb.sourceforge.net/remake


Documentation
-------------

GNU make is fully documented in the GNU Make manual, which is
contained in this distribution as the files doc/make.texi and
doc/makedb.texi.  You can also find on-line and preformatted
HTML at the sourceforge.net site:

  http://bashdb.sourceforge.net/remake/makedb.html
  http://bashdb.sourceforge.net/remake/make.html


Development
-----------

The GNU Make+debugger (remake)  development page is here:

  GNU Make development is hosted on Sourceforge.net here:

  http://savannah.gnu.org/projects/make/

You can find most information concerning the development of GNU Make +
debugger at this site.


Bug Reporting
-------------

You can send GNU make bug reports to <bug-make@gnu.org>.  Please see the
section of the GNU make manual entitled `Problems and Bugs' for
information on submitting useful and complete bug reports.

You can also use the online bug tracking system in the Savannah GNU Make
project to submit new problem reports or search for existing ones:

  http://sourceforge.net/tracker/?group_id=61395&atid=497159

CVS Access
----------

The GNU Make+debug source repository is available via CVS; look here
for details:

  http://sourceforge.net/cvs/?group_id=61395

Please note: you won't be able to build GNU make from CVS without
installing appropriate maintainer's tools, such as GNU m4, automake,
autoconf, Perl, GNU make, and GCC.  See the README.cvs file for hints on
how to build GNU make once these tools are available.  We make no
guarantees about the contents or quality of the latest code in the CVS
repository: it is not unheard of for code that is known to be broken to
be checked in.  Use at your own risk.


System-specific Notes
---------------------

One area that is often a problem in configuration and porting is the code
to check the system's current load average.  To make it easier to test and
debug this code, you can do `make check-loadavg' to see if it works
properly on your system.  (You must run `configure' beforehand, but you
need not build Make itself to run this test.)

Another potential source of porting problems is the support for large
files (LFS) in configure for those operating systems that provide it.
Please report any bugs that you find in this area.  If you run into
difficulties, then as a workaround you should be able to disable LFS by
adding the `--disable-largefile' option to the `configure' script.

On systems that support micro- and nano-second timestamp values and
where stat(2) provides this information, GNU make will use it when
comparing timestamps to get the most accurate possible result.  However,
note that many current implementations of tools that *set* timestamps do
not preserve micro- or nano-second granularity.  This means that "cp -p"
and other similar tools (tar, etc.) may not exactly duplicate timestamps
with micro- and nano-second granularity on some systems.  If your build
system contains rules that depend on proper behavior of tools like "cp
-p", you should consider using the .LOW_RESOLUTION_TIME pseudo-target to
force make to treat them properly.  See the manual for details.


Ports
-----

  - See README.customs for details on integrating GNU make with the
    Customs distributed build environment from the Pmake distribution.

  - See README.W32 for details about GNU Make on Windows NT, 95, or 98.

Various ports of older OS's have been pulled. For them you might try
standard GNU Make without the debugger.

It not they we have anything against these OSs; we don't. But we
neither to them, so they are not regularly tested. Furthermore, there
was an inordinant amount of clutter to support these and this hampers
a much needed cleanup of the code.

Should someone desire to add back in Amiga support, that would be
great. But we would also need to figure out how to add this back
OS-specific code in a more modular way than had been used previously.


